=> Variable:

    -> Storing and retrieving objects from heap is taken care by `Python Memory Manager`
    -> In python, we can find out the memory address referenced by a variable by using the `id()` function.
    -> `id()` will return a base-10 number. We can convert this base-10 number to hexadecimal, by using `hex()` function.

    Eg:
        a = 10
        print(hex(id(a)))


=> Reference counting:

    -> When we assign a variable to another, it actually assigns the reference
    -> When reference count of an object goes zero, `Python Memory Manager` erase the object from the heap.
    -> Finding reference count:
        Eg-1: sys.getrefcount(my_var)   ----> drawback of using this is, passing my_var to getrefcount() creates an extra reference so, subtract one refcount from the result

        Eg-2: ctypes.c_long.from_address(id(my_var)).value ----> does not affect reference count [Better approach]




    -> Circular reference:  my_var ---> {Obj_A : var_1}
                            Obj_A.var_1 ---> {Obj_B: var_2}
                            Obj_B.var_2 ---> {Obj_A : var_1}

                            and then we remove my_var, there will be circular reference and the due to that refcount will be non zero for Obj_A and Obj_B,
                            which will result in memory leak. Here comes the Garbage collector to detect these type of memory leak and clean them up.

=> Garbage collection:

    -> can be controlled programmatically using the `gc` module
    -> by default it is turned on
    -> you may turn it off if you're sure your code does not create circular reference - but beware!!!
    -> runs periodically on its own (if turned on )
    -> you can call it manually, and even do your own cleanup

    Note:   For python < 3.4 Garbage collector does not work always. 
            If even one of the objects in the circular reference has a destructor [eg: __del__()], the destructor order of the objects may be important


    -> Let's find if an object is collected by the Garbage collector

        Eg:
            import ctypes, gc

            def ref_count(address):
                return ctypes.c_long.from_address(address).value

            def object_by_id(object_id):
                for obj in gc.get_objects():
                    if id(obj) == object_id:
                        return 'Object exists'
                return 'Not Found'

            class A:
                def __init__(self):
                    self.b = B(self)
                    print('A: self: {0}, b: {1}'.format(hex(id(self)), hex(id(self.b))))

            class B:
                def __init__(self, a):
                    self.a = a
                    print('B: self: {0}, a: {1}'.format(hex(id(self)), hex(id(self.a))))

            gc.disable()    # Stopping the Garbage collector
            my_var = A()

            print(hex(id(my_var)))
            print(hex(id(my_var.b)))
            print(hex(id(my_var.b.a)))

            a_id = id(my_var)
            b_id = id(my_var.b)

            print(ref_count(a_id)) # 1
            print(ref_count(b_id)) # 1

            print(object_by_id(a_id))  # 'Object exists'
            print(object_by_id(b_id))  # 'Object exists'

            my_var = None

            print(ref_count(a_id)) # 1
            print(ref_count(b_id)) # 1

            print(object_by_id(a_id))  # 'Object exists'
            print(object_by_id(b_id))  # 'Object exists'

            gc.collect()

            print(object_by_id(a_id))  # 'Not Found'
            print(object_by_id(b_id))  # 'Not Found'


=> Dynamic typing vs Static typing:

    ->  Python variable does not have a type, instead it has reference to an object which is having a type and the corresponding value.
        That's why we can assign any value at any time to a python variable.
        ie; Variable in python do not have an inherent static type

    -> We can use built-in `type()` function to determine the type of the object currently referenced by a variable

    -> When we change the value of a variable, python creates a new object with that value and assigns the reference to the variable.
       Even when we increament value of a variable like `var = var + 5` it creates new object

    ->  a = 10  } 
        b = 10  } both with point to the same object


=> Object mutability and immutibility:

    -> An object whose internal state can be changed, is called Mutable
    -> An object whose internal state can not be changed, is called Immutable

    Note: Changing internal state means the address of the object will remain same but the data can be modified

    Immutable's Example:
        -> Numbers (int, float, Booleans, etc)
        -> Strings
        -> Tuples
        -> Frozen Sets
        -> User-Defined Classes

    Mutable's Example:
        -> Lists
        -> Sets
        -> Dictionaries
        -> User-Defined Classes  [Not written by mistake :P]    

    Note: If Immutable object (eg: Tuple) contains Mutable objects (eg: List) then the Mutable objects inside the Immutable object can me modified [Be careful]

        Eg:
          a = [1, 2]
          b = [3, 4]
          t = (a, b)    # t = ([1, 2], [3, 4])

          a.append(3)
          b.append(5)   # t = ([1, 2, 3], [3, 4, 5])

    
    -> Concatenating a new list to existing list will give new list object

        Eg:
            print(id(my_list_1))    # 235487952123
            my_list_1 = my_list_1 + [4]
            print(id(my_list_1))    # 235546546875


=> Function mutability and immutibility:

    -> Objects/Variables are always passed by reference in python and whether they gets modified themshelvs or not depends 
       on whether they are Mutable or Immutable.

    Eg-1: Passing an Immutable object
        def process(s):
            s = s + ' world'
            return s

        my_var = 'hello'
        print(process(my_var))

        print(my_var)   # hello

    Eg-2: Passing a Mutable object
        def process(lst):
            lst.append(100)

        my_list = [1, 2, 3]
        print(process(my_list)) # [1, 2, 3, 100]


=> Shared reference and mutability:

    -> The term Shared reference is the concept of two variable referencing the same object in memory
       (i.e. having the same memory address)

    -> If we provide same value to two Immutable object, it will share the same memory reference 

    -> If we create two mutable objects with same valuel, it will create two different objects in memory

        Eg:
            a = [1, 2, 3]
            b = [1, 2, 3]


=> Variable Equality:

    -> `is` operator: It compares memory addresses of variables 
        Eg: var_1 is var_2

    -> `==` operator: It compares object's state (data) of variables
        Eg: var_1 == var_2


    Eg-1:
        a = 10
        b = 10.0

        print(a is b)   # False
        print(a == b)   # True

    Eg-2:
        a = 10
        b = 10 + 0j

        print(a is b)   # False
        print(a == b)   # True

    -> `None` Object:

        -> The `None` object can be assigned to variable to indicate that they are not set
           (in the way we would expect them to be), i.e. an "empty" value (or null pointer)

        -> But the None object is a real object that is managed by the Python memory manager,

        -> Furthermore, the memory manager will always use a shared reference when assigning a variable to `None`

        -> So we can test if a variable is "not set" or "empty" by comparing it's memory address to the memory address
           of `None` using the `is` operator.
        
            x = 10
            x is None       # False
            x is not None   # True


=> All data types (Integer, Boolean etc) and all constructs (Operators, Functions, Classes) are all `objects`

    Eg: Functions (function)
        Classes (class)     [not just instances, but the class itself]
        Types (type)

    -> This means they all have a memory address!

    -> Any object can be assigned to a variable including functions
    -> Any object can be passed to a function including functions
    -> Any object can be returned from a function including functions

    Eg-1:
        x = 10
        print(type(x))

        x = int(20)
        print(x)
 
        x = int('1010', base=2)
        print(x)

    Eg-2:
        def square(num):
            return num ** 2

        print(type(square)) # <class 'function'>


===> Python Optimizations:

Important Notes:

    A lot of what we discuss with memory management, garbage collection and optimizations, is usually specific to the python implementation we use.

    In this course, we are using CPython, the standard (or reference) Python implementation (written in C).

    But there are other Python implementation out there, These include:

        -> Jython - written in java and can import and use any Java class - in fact it even compiles to java bytecode
                    which can run in a JVM
        
        -> IronPython - this one is written in C# and targets .Net (and mono) CLR

        -> PyPy - this one is written in RPython (which is itself a statically-typed subset of Python written in C that is specifically designed
                  to write interpreters)

        -> and many more....... (https://wiki.python.org/moin/PythonImplementations)


=> Interning: reusing object on-demand

    At startup, Python (CPython), pre-loads (caches) a global list of integers in the range [-5, 256]
    Any time an integer is referenced in that range, Python will use the cached version of that object and these objects are `singletons`
        [ Optimization strategy - small integers show up often ]

    When we write
        a = 10
    Python just has to point to the existing reference for 10

    But if we write 
        a = 257
    Python does not use that global list and a new object is created every time.

    
    --> Strings having spaces in them don't share the same reference but without the spaces in them they share same memory address

=> String Interning: 

    Some strings are also automatically intered - but not all!

    As the Python code is compiled, `identifiers` are interned

    Some string literals may also be automatically intered:
        -> string literals that look like identifiers (e.g. `hello_world`)
        -> although if it starts with a digit, even though that is not a valid identifier, it may still get intered [But don't count on it!]

    Python, both internally, and int the code you write, deals with lots and lots of dictionary type lookups, on string keys,
    which means a lot of string equality testing.

    Let's say we want to see if two strings are equal:\
        a = 'some_long_string'  b = 'some_long_string'

    Using a == b, we need to compare the two strings character by character

    -> But if we know that 'some_long_string' has been interned, then a and b are the same string if they both point to the same memory address
       In which case we can use `a is b` instead - which compares two integers (memory address)
       This is much faster than the character by character comparison.

    -> We can force strings to be interned by using `sys.intern()` method.

    import sys

    a = sys.intern('the quick brown fox')
    b = sys.intern('the quick brown fox')

    print(a is b)   # True


    When should we do this:
        -> dealing with a large number of string that could have high repetition 
           e.g. tokenizing a large corpus of text (NLP)
        -> lots of string comparison


=> Peephole:
    This is another variety of optimizations that occur at compile time.

    -> Constant expressions
        numeric calculations
            24 * 60  ---> Python will actually pre-calculate 24 * 60 -> 1440

        short sequences length < 20
            (1, 2) * 5          -> (1, 2, 1, 2, 1, 2, 1, 2, 1, 2)
            'abc' * 3           ->  abcabcabc
            'hello ' + 'world'  -> hello world

        but not 'the quick brown fox' * 10  (more than 20 character)

    -> Membership Tests: Mutables are replaced by Immutables

       When membership tests such as:
        if e in  [1, 2, 3]:
       are encountered, the [1, 2, 3] constant, is replaced by it's immutable counterpart (1, 2, 3) tuple

       --> `lists` convert to `tuples`  
       --> `sets` convert to `frozensets`

       -> Set membership is much faster than list or tuple membership (sets are basically like Dictionaries)
          So, insted of writing:
            if e in  [1, 2, 3]:     or      if e in  (1, 2, 3):
          Write     if e in  {1, 2, 3}:  ----> Much faster than list and tuple


    Eg-1:
        def my_func():
            a = 24 * 60
            b = (1, 2) * 5
            c = 'abc' * 3
            d = 'ab' * 11
            e = 'the quick brown fox' * 5
            f = ['a', 'b'] * 3

        print(my_func.__code__.cod_consts)  # will print all the constants in the function

    Eg-2: converts to tuple
        def my_func(e):
            if e in [1, 2, 3]:
                pass
        
        print(my_func.__code__.cod_consts)

    Eg-3: converts to frozenset
        def my_func(e):
            if e in {1, 2, 3}:
                pass
        
        print(my_func.__code__.cod_consts)
        